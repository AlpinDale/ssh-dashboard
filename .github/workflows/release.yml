name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          
          # macOS
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          
          # Windows
          - goos: windows
            goarch: amd64
            name: windows-amd64
          - goos: windows
            goarch: arm64
            name: windows-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          OUTPUT_NAME="ssh-dashboard-${{ steps.version.outputs.VERSION }}-${{ matrix.name }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o "${OUTPUT_NAME}" ./cmd/ssh_dashboard

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ssh-dashboard-*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate checksums
        run: |
          sha256sum ssh-dashboard-* > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ssh-dashboard-*
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

